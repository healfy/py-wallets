# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: currencies.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import google.api.annotations_pb2
import protoc_gen_swagger.options.annotations_pb2
import currencies_pb2


class CurrenciesServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Health(self, stream: 'grpclib.server.Stream[currencies_pb2.HealthzRequest, currencies_pb2.HealthzResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Get(self, stream: 'grpclib.server.Stream[currencies_pb2.CurrenciesRequest, currencies_pb2.CurrenciesResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/currencies.CurrenciesService/Health': grpclib.const.Handler(
                self.Health,
                grpclib.const.Cardinality.UNARY_UNARY,
                currencies_pb2.HealthzRequest,
                currencies_pb2.HealthzResponse,
            ),
            '/currencies.CurrenciesService/Get': grpclib.const.Handler(
                self.Get,
                grpclib.const.Cardinality.UNARY_UNARY,
                currencies_pb2.CurrenciesRequest,
                currencies_pb2.CurrenciesResponse,
            ),
        }


class CurrenciesServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Health = grpclib.client.UnaryUnaryMethod(
            channel,
            '/currencies.CurrenciesService/Health',
            currencies_pb2.HealthzRequest,
            currencies_pb2.HealthzResponse,
        )
        self.Get = grpclib.client.UnaryUnaryMethod(
            channel,
            '/currencies.CurrenciesService/Get',
            currencies_pb2.CurrenciesRequest,
            currencies_pb2.CurrenciesResponse,
        )
