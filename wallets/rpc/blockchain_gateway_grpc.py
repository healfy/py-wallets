# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: blockchain_gateway.proto
# plugin: grpclib.plugin.main
import abc

import grpclib.const
import grpclib.client

import google.api.annotations_pb2
import protoc_gen_swagger.options.annotations_pb2
import blockchain_gateway_pb2


class BlockchainGatewayServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Health(self, stream):
        pass

    @abc.abstractmethod
    async def GetAvailableCurrencies(self, stream):
        pass

    @abc.abstractmethod
    async def GetBalance(self, stream):
        pass

    @abc.abstractmethod
    async def GetWallet(self, stream):
        pass

    @abc.abstractmethod
    async def SendTransaction(self, stream):
        pass

    @abc.abstractmethod
    async def GetTransactionsList(self, stream):
        pass

    @abc.abstractmethod
    async def GetTransaction(self, stream):
        pass

    @abc.abstractmethod
    async def SendFromColdWallet(self, stream):
        pass

    @abc.abstractmethod
    async def GetPlatformWalletsBalance(self, stream):
        pass

    @abc.abstractmethod
    async def GetBalanceBySlug(self, stream):
        pass

    @abc.abstractmethod
    async def SendToColdWallet(self, stream):
        pass

    @abc.abstractmethod
    async def CheckAddress(self, stream):
        pass

    @abc.abstractmethod
    async def SendFromExchangerWallet(self, stream):
        pass

    @abc.abstractmethod
    async def GetTrxListExchangerWallet(self, stream):
        pass

    def __mapping__(self):
        return {
            '/blockchain_gateway.BlockchainGatewayService/Health': grpclib.const.Handler(
                self.Health,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.HealthzRequest,
                blockchain_gateway_pb2.HealthzResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetAvailableCurrencies': grpclib.const.Handler(
                self.GetAvailableCurrencies,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.EmptyRequest,
                blockchain_gateway_pb2.AvailableCurrenciesResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetBalance': grpclib.const.Handler(
                self.GetBalance,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.GetBalanceRequest,
                blockchain_gateway_pb2.GetBalanceResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetWallet': grpclib.const.Handler(
                self.GetWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.GetWalletRequest,
                blockchain_gateway_pb2.GetWalletResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/SendTransaction': grpclib.const.Handler(
                self.SendTransaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.SendTransactionMessage,
                blockchain_gateway_pb2.SendTransactionMessage,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetTransactionsList': grpclib.const.Handler(
                self.GetTransactionsList,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.GetTransactionsListRequest,
                blockchain_gateway_pb2.GetTransactionsListResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetTransaction': grpclib.const.Handler(
                self.GetTransaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.GetTransactionRequest,
                blockchain_gateway_pb2.GetTransactionResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/SendFromColdWallet': grpclib.const.Handler(
                self.SendFromColdWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.SendFromColdWalletRequest,
                blockchain_gateway_pb2.SendFromColdWalletResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetPlatformWalletsBalance': grpclib.const.Handler(
                self.GetPlatformWalletsBalance,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.EmptyRequest,
                blockchain_gateway_pb2.GetPlatformWalletsBalanceResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetBalanceBySlug': grpclib.const.Handler(
                self.GetBalanceBySlug,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.GetBalanceBySlugRequest,
                blockchain_gateway_pb2.GetBalanceResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/SendToColdWallet': grpclib.const.Handler(
                self.SendToColdWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.SendToColdWalletRequest,
                blockchain_gateway_pb2.SendToColdWalletResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/CheckAddress': grpclib.const.Handler(
                self.CheckAddress,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.CheckAddressRequest,
                blockchain_gateway_pb2.CheckAddressResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/SendFromExchangerWallet': grpclib.const.Handler(
                self.SendFromExchangerWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.SendFromColdWalletRequest,
                blockchain_gateway_pb2.SendFromColdWalletResponse,
            ),
            '/blockchain_gateway.BlockchainGatewayService/GetTrxListExchangerWallet': grpclib.const.Handler(
                self.GetTrxListExchangerWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                blockchain_gateway_pb2.GetTrxExchangersListRequest,
                blockchain_gateway_pb2.GetTransactionsListResponse,
            ),
        }


class BlockchainGatewayServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Health = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/Health',
            blockchain_gateway_pb2.HealthzRequest,
            blockchain_gateway_pb2.HealthzResponse,
        )
        self.GetAvailableCurrencies = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetAvailableCurrencies',
            blockchain_gateway_pb2.EmptyRequest,
            blockchain_gateway_pb2.AvailableCurrenciesResponse,
        )
        self.GetBalance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetBalance',
            blockchain_gateway_pb2.GetBalanceRequest,
            blockchain_gateway_pb2.GetBalanceResponse,
        )
        self.GetWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetWallet',
            blockchain_gateway_pb2.GetWalletRequest,
            blockchain_gateway_pb2.GetWalletResponse,
        )
        self.SendTransaction = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/SendTransaction',
            blockchain_gateway_pb2.SendTransactionMessage,
            blockchain_gateway_pb2.SendTransactionMessage,
        )
        self.GetTransactionsList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetTransactionsList',
            blockchain_gateway_pb2.GetTransactionsListRequest,
            blockchain_gateway_pb2.GetTransactionsListResponse,
        )
        self.GetTransaction = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetTransaction',
            blockchain_gateway_pb2.GetTransactionRequest,
            blockchain_gateway_pb2.GetTransactionResponse,
        )
        self.SendFromColdWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/SendFromColdWallet',
            blockchain_gateway_pb2.SendFromColdWalletRequest,
            blockchain_gateway_pb2.SendFromColdWalletResponse,
        )
        self.GetPlatformWalletsBalance = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetPlatformWalletsBalance',
            blockchain_gateway_pb2.EmptyRequest,
            blockchain_gateway_pb2.GetPlatformWalletsBalanceResponse,
        )
        self.GetBalanceBySlug = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetBalanceBySlug',
            blockchain_gateway_pb2.GetBalanceBySlugRequest,
            blockchain_gateway_pb2.GetBalanceResponse,
        )
        self.SendToColdWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/SendToColdWallet',
            blockchain_gateway_pb2.SendToColdWalletRequest,
            blockchain_gateway_pb2.SendToColdWalletResponse,
        )
        self.CheckAddress = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/CheckAddress',
            blockchain_gateway_pb2.CheckAddressRequest,
            blockchain_gateway_pb2.CheckAddressResponse,
        )
        self.SendFromExchangerWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/SendFromExchangerWallet',
            blockchain_gateway_pb2.SendFromColdWalletRequest,
            blockchain_gateway_pb2.SendFromColdWalletResponse,
        )
        self.GetTrxListExchangerWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/blockchain_gateway.BlockchainGatewayService/GetTrxListExchangerWallet',
            blockchain_gateway_pb2.GetTrxExchangersListRequest,
            blockchain_gateway_pb2.GetTransactionsListResponse,
        )
