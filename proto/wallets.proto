syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";


package wallets;
option go_package = "wlt-go";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Wallets service";
		version: "1.0";
	};
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	base_path: "/api";
};


// WalletsService server
service Wallets {
	rpc Healthz(HealthzRequest) returns (HealthzResponse) {
		option (google.api.http) = {
				get: "/health"
			};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Health checking endpoint"
			description: "Health checking endpoint. Returns HealthzResponse";
		  };
		};
	rpc StartMonitoring(MonitoringRequest) returns (MonitoringResponse) {
		option (google.api.http) = {
			post: "/start_monitoring"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Start monitoring wallet on service endpoint"
			description: "Send wallet with params to start monitoring on service";
		};
	};
	rpc StopMonitoring(MonitoringRequest) returns (MonitoringResponse) {
		option (google.api.http) = {
			post: "/stop_monitoring"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Stop monitoring wallet on service endpoint"
			description: "Send wallet with params to stop monitoring on service";
		};
	};

	rpc CheckBalance(CheckBalanceRequest) returns (CheckBalanceResponse) {
		option (google.api.http) = {
			get: "/check_balance"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Check Balance of platform wallets"
			description: "Check balance when we issue loan";
		};
	};
	rpc UpdateTrx(TransactionRequest) returns (TransactionResponse) {
		option (google.api.http) = {
			post: "/update_trx"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Endpoint to update transaction"
			description: "Update status transactions from blockchain";
		};
	};
	rpc GetInputTransactions(InputTransactionsRequest) returns (InputTransactionsResponse) {
		option (google.api.http) = {
			post: "/get_input_trx"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Endpoint to get wallet input transactions"
			description: "Endpoint to get wallet input transactions";
		};
	}

    rpc StartMonitoringPlatformWallet(PlatformWLTMonitoringRequest) returns (PlatformWLTMonitoringResponse) {
		option (google.api.http) = {
			post: "/start_monitoring/platform"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			summary: "Endpoint to start monitoring platform wallet"
			description: "Endpoint to start monitoring platform wallet";
		};
	}


}

enum ResponseStatus {
    NOT_SET = 0;
    SUCCESS = 1;
    ERROR = 2;
    INVALID_REQUEST = 3;
}

enum TransactionStatus {
    UNDEFINED = 0;
    NEW = 1;
    NOT_FOUND = 2;
    SUCCESSFUL = 3;
    FAILED = 4;
    PENDING = 5;
    CONFIRMED = 6;
}

message ResponseHeader {
    ResponseStatus status = 1;
    string description = 2;
}

message HealthzRequest {};


message HealthzResponse {
    ResponseHeader header = 1;
}

message Wallet {
    int64 id = 1;
    string currency_slug = 2;
    string address = 3;
    bool is_platform = 4;
    int64 external_id = 5;

}

message MonitoringRequest {
    Wallet wallet = 1;
}

message MonitoringResponse {
    ResponseHeader header = 1;
}

message CheckBalanceRequest {
    string body_currency = 1;
    string body_amount = 2;
}

message CheckBalanceResponse {
    ResponseHeader header = 1;
}

message Transaction {
    string from = 1;
    string to = 2;
    string hash = 3;
    string value = 5;
    int64 wallet_id = 6;
    string currencySlug = 7;
    TransactionStatus status = 8;
    bool is_fee_trx = 9;
    int64 time_confirmed = 10;
}

message TransactionRequest {
    repeated Transaction transaction = 1;
}

message TransactionResponse {
    ResponseHeader header = 1;
}

message InputTransactionsRequest{
    int64 wallet_id = 1;
    string wallet_address = 2;
    int64 time_from = 3;
    int64 time_to = 4;
}

message InputTransactionsResponse{
    ResponseHeader header = 1;
    repeated Transaction transactions = 2;
}

message PlatformWLTMonitoringRequest {
    string uuid = 1;
    string expected_address = 2;
    string expected_amount = 3;
    int64 wallet_id = 4;
    string wallet_address = 5;
    string expected_currency = 6;
}

message PlatformWLTMonitoringResponse {
    ResponseHeader header = 1;
}
