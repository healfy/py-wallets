syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";


package wallets;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Wallets service";
    version: "1.0";
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  base_path: "/api";
};


// WalletsService server
service Wallets {
	rpc Healthz(HealthzRequest) returns (HealthzResponse) {};
	rpc GetWalletBalance(WalletBalanceRequest) returns (WalletBalanceResponse) {};
	rpc StartMonitoring(MonitoringRequest) returns (MonitoringResponse) {};
	rpc StopMonitoring(MonitoringRequest) returns (MonitoringResponse) {};
	rpc CheckBalance(CheckBalanceRequest) returns (CheckBalanceResponse) {};
	rpc UpdateTrx(TransactionRequest) returns (TransactionResponse) {};
}

enum ResponseStatus {
	NOT_SET = 0;
	SUCCESS = 1;
	ERROR = 2;
	INVALID_REQUEST = 3;
}

enum TransferStatus {
    UNDEFINED = 0;
    ACTIVE = 1;
    CONFIRMED = 2;
    FAILED = 3;
}

message ResponseHeader {
	ResponseStatus status = 1;
	string description = 2;
}

message HealthzRequest {};


message HealthzResponse {
	ResponseHeader header = 1;
}

message Wallet {
	int64 id = 1;
	string currency_slug = 2;
	string address = 3;
	bool is_platform = 4;
	int64 external_id = 5;

}

message MonitoringRequest {
	Wallet wallet = 1;
}

message WalletBalanceRequest {
	int64 external_id = 1;
	string address = 2;
}

message WalletBalanceResponse {
	ResponseHeader header = 1;
	string balance = 2;
}

message MonitoringResponse {
	ResponseHeader header = 1;
}

message CheckBalanceRequest {
	string body_currency = 1;
    string body_amount = 2;
}

message CheckBalanceResponse {
	ResponseHeader header = 1;
}

message Transaction {
    string from = 1;
    string to = 2;
    string hash = 3;
    int64 wallet_id = 4;
    string value = 5;
    bool isOutput = 6;
    string currencySlug = 7;
    TransferStatus transfer_status = 8;
	bool is_fee_trx = 9;
}

message TransactionRequest {
	repeated Transaction transaction = 1;
}

message TransactionResponse {
	ResponseHeader header = 1;
}
